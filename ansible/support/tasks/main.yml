---
- hosts: all
  vars_files:
    - ../vars/main.yml
    - ../vars/ports.yml
  handlers:
  - import_tasks: ../handlers/main.yml

  ####################################################################################
  # Verify and Validate prior to starting execution
  pre_tasks:
  - name: Verify Ansible version.
    assert:
      that: "ansible_version.full is version_compare('2.12', '>=')"
      msg: >
          "You must update Ansible to at least 2.12"

  - name: Validate values for DNS compatibility
    fail:
      msg: "Please revise your vars.yaml file. Invalid characters found in hostnames"
    when: item is search('{{ chars }}')
    with_items:
    - "{{ dns.domain }}"
    - "{{ helper.name }}"
    - "{{ workers | default('') }}"

  ####################################################################################
  # 
  tasks:
  - name: setup set facts
    include: facts.yaml

  - name: Install needed packages
    package:
      name: "{{ packages }}"
      state: present

  - name: Cleans up existing config files
    import_tasks: cleanup.yaml
    when: cleanup_existing

  - name: Install packages for DHCP/PXE install
    package:
      name: "{{ dhcppkgs }}"
      state: present
    when: not staticips

  - name: Write out dhcp file
    template:
      src: ../templates/dhcpd.conf.j2
      dest: /etc/dhcp/dhcpd.conf
    notify:
      - restart dhcpd

  - name: Setup named configuration files
    block:
    - name: Write out named file
      template:
        src: ../templates/named.conf.j2
        dest: /etc/named.conf
      notify:
        - restart bind
    
    - name: Installing DNS Serialnumber generator
      copy:
        src: ../files/set-dns-serial.sh
        dest: /usr/local/bin/set-dns-serial.sh
        mode: '0555'

    - name: Set zone serial number
      shell: "/usr/local/bin/set-dns-serial.sh"
      register: dymanicserialnumber

    - name: Setting serial number as a fact
      set_fact:
        serialnumber: "{{ dymanicserialnumber.stdout }}"

    - name: Write out "{{ dns.domain | lower }}" zone file
      template:
        src: ../templates/zonefile.j2
        dest: /var/named/zonefile.db
        mode: '0644'
      notify:
        - restart bind

    - name: Write out reverse zone file
      template:
        src: ../templates/reverse.j2
        dest: /var/named/reverse.db
        mode: '0644'
      notify:
        - restart bind

  - name: Set HTTP server
    block:
    - name: Copy httpd conf file
      copy:
        src: ../files/httpd.conf
        dest: /etc/httpd/conf/httpd.conf
      notify:
        - restart httpd

    - name: Create apache directories for installing
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      with_items:
        - /var/www/html/install
        - /var/www/html/ignition

  - name: Start firewalld service
    systemd:
      name: firewalld
      state: started
      enabled: yes

  - name: Open up firewall ports
    firewalld:
      permanent: yes
      immediate: yes
      state: enabled
      port: "{{ item[0] }}"
    delegate_to: "{{ item[1] }}"
    run_once: true
    with_nested:
      - "{{ ports }}"
      - "{{ ansible_play_batch }}"

  - name: Best effort SELinux repair - DNS
    shell: "restorecon -vR /var/named || true"

  - name: Best effort SELinux repair - Apache
    shell: "restorecon -vR /var/www/html || true"

  - name: generate netboot entry for grub2
    shell: grub2-mknetdir --net-directory=/var/lib/tftpboot

  - name: Create TFTP RHCOS dir
    file:
      path: /var/lib/tftpboot/rhcos
      state: directory
      mode: 0755
    when: not staticips

  - name: Systemd daemon reload
    systemd:
      daemon_reload: yes
    when: not staticips

  - name: Starting services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - "{{ services }}"

  # - name: Starting DHCP/PXE services for baremetal
  #   service:
  #     name: "{{ item }}"
  #     enabled: yes
  #     state: started
  #   with_items:
  #     - dhcpd
  #     - tftp
  #     - helper-tftp
  #   when: not staticips and baremetal

  - name: Starting DHCP/PXE services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - dhcpd
    when: not staticips

  - name: Unmasking Services
    systemd:
      name: "{{ item }}"
      enabled: yes
      masked: no
    with_items:
      - tftp
    when: not staticips

  - name: Delete OCP4 files, if requested, to download again
    file:
      state: absent
      path: "{{ item }}"
    with_items:
      - "/usr/local/src/openshift-client-linux.tar.gz"
      - "/usr/local/src/openshift-install-linux.tar.gz"
      - "/var/www/html/install/bios.raw.gz"
      - "/var/www/html/install/rootfs.img"
      - "/var/lib/tftpboot/rhcos/initramfs.img"
      - "/var/lib/tftpboot/rhcos/kernel"

  - name: Preparing OCP client
    when: ocp_client is defined
    block:
    - name: Downloading OCP4 client
      get_url:
        url: "{{ ocp_client }}"
        dest: /usr/local/src/openshift-client-linux.tar.gz

    - name: Unarchiving OCP4 client
      unarchive:
        src: /usr/local/src/openshift-client-linux.tar.gz
        dest: /usr/local/bin
        remote_src: yes

  - name: Preparing OCP installer
    when: ocp_installer is defined
    block:
    - name: Downloading OCP4 Installer
      get_url:
        url: "{{ ocp_installer }}"
        dest: /usr/local/src/openshift-install-linux.tar.gz

    - name: Unarchiving OCP4 Installer
      unarchive:
        src: /usr/local/src/openshift-install-linux.tar.gz
        dest: /usr/local/bin
        remote_src: yes

  - name: Removing files that are not needed
    file:
      path: /usr/local/bin/README.md
      state: absent

  - name: Set the local resolv.conf file
    template:
      src: ../templates/resolv.conf.j2
      dest: /etc/resolv.conf

  - name: Get network device system name
    shell: "nmcli -t dev show {{ networkifacename }} | grep GENERAL.CONNECTION | cut -d: -f2"
    register: devicesystemname

  - name: Setting network device system name as a fact
    set_fact:
      dsname: "{{ devicesystemname.stdout }}"

  - name: Setting DNS server ip on network interface "{{ dsname }}" to 127.0.0.1
    shell: 'nmcli con mod "{{ dsname }}" ipv4.dns 127.0.0.1'

  - name: Setting DNS search path on network interface "{{ dsname }}" to "{{ dns.clusterid }}.{{ dns.domain | lower }}"
    shell: 'nmcli con mod  "{{ dsname }}" ipv4.dns-search {{ dns.clusterid }}.{{ dns.domain | lower }}'

  - name: Restarting NetworkManager
    service:
      name: "{{ item }}"
      state: restarted
    with_items:
      - NetworkManager

  - name: Enable restart always for critical services
    include_tasks: config_services.yaml
    loop: "{{ critical_services }}"

  # - name: Disable named service
  #   service:
  #     name: named
  #     state: stopped
  #   when: dhcp.dns is defined and dhcp.dns != helper.ipaddr

  - name: restart named
    service:
      name: named
      state: restarted

  - name: Download the ignition file to http server
    block:
    - name: Downloading the ignition file
      get_url:
        url: "https://api-int.{{ cluster_domain }}:22623/config/worker"
        dest: /var/www/html/ignition/worker.ign
        validate_certs: false

    - name: Make ignition file readable
      ansible.builtin.file:
        path: /var/www/html/ignition/
        owner: nobody
        group: nobody
        mode: u+rw,g-rx,o-rx

    - name: Make ignition file readable
      ansible.builtin.file:
        path: /var/www/html/ignition/worker.ign
        owner: nobody
        group: nobody
        mode: u+rw,g-rx,o-rx