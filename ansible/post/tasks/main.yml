---
- name: Post Installation Tasks (Approving CSRs, Setting up Node Labels, Installation of RSCT Daemonset)
  hosts: all
  vars_files:
    - ../vars/main.yml

  tasks:
  - name: Get CSRs
    shell: "oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name'"
    register: csr_list

  - name: Get Worker Nodes count (with ppc64le architecture)
    shell: "oc get nodes -l kubernetes.io/arch=ppc64le | grep -w worker | wc -l"
    register: ppc_nodes_count

  - name: Print PPC Node count and CSRs
    debug:
      msg: "PPC Worker Node count is : {{ ppc_nodes_count.stdout }}, Pending CSR List is : {{ csr_list.stdout }}"

  # Run approve command till we have all ppc workers ready. 'xargs -r ' is used to ignore empty stdin.
  - name: Approve Worker CSRs
    shell: "oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs -r oc adm certificate approve"
    until: lookup('pipe','oc get nodes -l kubernetes.io/arch=ppc64le | grep -w worker | grep -w Ready | wc -l') == ppc_nodes_count.stdout
    retries: 10
    delay: 30
    when: csr_list.stdout != ""

  - name: Ensure able to fetch project list
    shell: "oc get projects"
    register: projects_list
    until: projects_list.stdout.find("default") != -1
    retries: 20
    delay: 30

  - name: Create openshift-powervm-rmc project
    when: projects_list.stdout.find("openshift-powervm-rmc") == -1
    k8s:
      name: "{{ project_name }}"
      api_version: project.openshift.io/v1
      kind: Project
      state: present

  - name: Create openshift-powervm-rmc serviceaccount
    k8s:
      state: present
      definition:
        api_version: v1
        kind: ServiceAccount
        metadata:
          name: "{{ rmc_name }}"
          namespace: "{{ project_name }}"

  - name: Add privileged scc to openshift-powervm-rmc serviceaccount
    shell: "oc adm policy add-scc-to-user -z openshift-powervm-rmc privileged -n openshift-powervm-rmc"

  - name: Deploy openshift-powervm-rmc DaemonSet
    k8s:
      state: present
      definition: "{{ lookup('template', '../templates/rsct-deamonset.yml.j2') }}"

  - name: Get Nodes with ppc64le architecture
    shell: "oc get nodes -l kubernetes.io/arch=ppc64le | awk '(NR>1) { print $1 }'"
    register: node_names

  - name: Print Node names with ppc64le architecture
    debug:
      msg: "Nodes with ppc64le : {{ node_names.stdout_lines }}"

  - name: Add labels defined in node_labels to ppc64le Nodes
    k8s:
      state: present
      kind: Node
      name: "{{ item }}"
      definition:
        metadata:
          labels: "{{ node_labels }}"
    with_items: "{{ node_names.stdout_lines }}"
